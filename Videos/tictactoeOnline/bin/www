#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tictactoeonline:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

server.currentID = 0;
let players = [];
let turn = 1;

const io = require('socket.io')(server);

io.on('connection', socket=> {
  // console.log(`User has joined the game.`);
  socket.on('new player', ()=> {
    socket.stats = {id: server.currentID++, spaces: []};
    io.emit('new player', socket.stats);
    socket.emit('set stats', socket.stats);
    if(socket.stats.id < 2) {
      players.push(socket.stats);
    }
    io.emit('players', players);
    io.emit('turn', turn);
  })

  socket.on('player played', data=> {
    players = data.players;
    turn = data.turn;
    io.emit('players', data.players);
    io.emit('turn', data.turn);
  })

  socket.on('disconnect', ()=> {
    // console.log(`User has left the game.`);
    io.emit('player left', socket.stats);
  })
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
